!function(e){function t(e){var t=require("./"+e+"."+o+".hot-update.js");!function(e,t){if(!w[e]||!g[e])return;for(var r in g[e]=!1,t)Object.prototype.hasOwnProperty.call(t,r)&&(h[r]=t[r]);0==--v&&0===m&&j()}(t.id,t.modules)}var r,n=!0,o="286fa85082f69f50aa3b",s={},i=[],c=[];function a(e){var t=_[e];if(!t)return D;var n=function(n){return t.hot.active?(_[n]?-1===_[n].parents.indexOf(e)&&_[n].parents.push(e):(i=[e],r=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),i=[]),D(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return D[e]},set:function(t){D[e]=t}}};for(var s in D)Object.prototype.hasOwnProperty.call(D,s)&&"e"!==s&&"t"!==s&&Object.defineProperty(n,s,o(s));return n.e=function(e){return"ready"===u&&p("prepare"),m++,D.e(e).then(t,function(e){throw t(),e});function t(){m--,"prepare"===u&&(b[e]||O(e),0===m&&0===v&&j())}},n.t=function(e,t){return 1&t&&(e=n(e)),D.t(e,-2&t)},n}function d(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==e,active:!0,accept:function(e,r){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._acceptedDependencies[e[n]]=r||function(){};else t._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._declinedDependencies[e[r]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=t._disposeHandlers.indexOf(e);r>=0&&t._disposeHandlers.splice(r,1)},check:E,apply:P,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:s[e]};return r=void 0,t}var l=[],u="idle";function p(e){u=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var f,h,y,v=0,m=0,b={},g={},w={};function x(e){return+e+""===e?+e:e}function E(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return n=e,p("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return p("idle"),null;g={},b={},w=e.c,y=e.h,p("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});h={};return O(0),"prepare"===u&&0===m&&0===v&&j(),t})}function O(e){w[e]?(g[e]=!0,v++,t(e)):b[e]=!0}function j(){p("ready");var e=f;if(f=null,e)if(n)Promise.resolve().then(function(){return P(n)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var r in h)Object.prototype.hasOwnProperty.call(h,r)&&t.push(x(r));e.resolve(t)}}function P(t){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var r,n,c,a,d;function l(e){for(var t=[e],r={},n=t.slice().map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),s=o.id,i=o.chain;if((a=_[s])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:s};if(a.hot._main)return{type:"unaccepted",chain:i,moduleId:s};for(var c=0;c<a.parents.length;c++){var d=a.parents[c],l=_[d];if(l){if(l.hot._declinedDependencies[s])return{type:"declined",chain:i.concat([d]),moduleId:s,parentId:d};-1===t.indexOf(d)&&(l.hot._acceptedDependencies[s]?(r[d]||(r[d]=[]),f(r[d],[s])):(delete r[d],t.push(d),n.push({chain:i.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}t=t||{};var v={},m=[],b={},g=function(){console.warn("[HMR] unexpected require("+O.moduleId+") to disposed module")};for(var E in h)if(Object.prototype.hasOwnProperty.call(h,E)){var O;d=x(E);var j=!1,P=!1,A=!1,S="";switch((O=h[E]?l(d):{type:"disposed",moduleId:E}).chain&&(S="\nUpdate propagation: "+O.chain.join(" -> ")),O.type){case"self-declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(j=new Error("Aborted because of self decline: "+O.moduleId+S));break;case"declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+O.moduleId+" in "+O.parentId+S));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(O),t.ignoreUnaccepted||(j=new Error("Aborted because "+d+" is not accepted"+S));break;case"accepted":t.onAccepted&&t.onAccepted(O),P=!0;break;case"disposed":t.onDisposed&&t.onDisposed(O),A=!0;break;default:throw new Error("Unexception type "+O.type)}if(j)return p("abort"),Promise.reject(j);if(P)for(d in b[d]=h[d],f(m,O.outdatedModules),O.outdatedDependencies)Object.prototype.hasOwnProperty.call(O.outdatedDependencies,d)&&(v[d]||(v[d]=[]),f(v[d],O.outdatedDependencies[d]));A&&(f(m,[O.moduleId]),b[d]=g)}var q,k=[];for(n=0;n<m.length;n++)d=m[n],_[d]&&_[d].hot._selfAccepted&&k.push({module:d,errorHandler:_[d].hot._selfAccepted});p("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var H,I,M=m.slice();M.length>0;)if(d=M.pop(),a=_[d]){var C={},T=a.hot._disposeHandlers;for(c=0;c<T.length;c++)(r=T[c])(C);for(s[d]=C,a.hot.active=!1,delete _[d],delete v[d],c=0;c<a.children.length;c++){var U=_[a.children[c]];U&&((q=U.parents.indexOf(d))>=0&&U.parents.splice(q,1))}}for(d in v)if(Object.prototype.hasOwnProperty.call(v,d)&&(a=_[d]))for(I=v[d],c=0;c<I.length;c++)H=I[c],(q=a.children.indexOf(H))>=0&&a.children.splice(q,1);for(d in p("apply"),o=y,b)Object.prototype.hasOwnProperty.call(b,d)&&(e[d]=b[d]);var R=null;for(d in v)if(Object.prototype.hasOwnProperty.call(v,d)&&(a=_[d])){I=v[d];var L=[];for(n=0;n<I.length;n++)if(H=I[n],r=a.hot._acceptedDependencies[H]){if(-1!==L.indexOf(r))continue;L.push(r)}for(n=0;n<L.length;n++){r=L[n];try{r(I)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:d,dependencyId:I[n],error:e}),t.ignoreErrored||R||(R=e)}}}for(n=0;n<k.length;n++){var N=k[n];d=N.module,i=[d];try{D(d)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(r){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:r,originalError:e}),t.ignoreErrored||R||(R=r),R||(R=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:d,error:e}),t.ignoreErrored||R||(R=e)}}return R?(p("fail"),Promise.reject(R)):(p("idle"),new Promise(function(e){e(m)}))}var _={};function D(t){if(_[t])return _[t].exports;var r=_[t]={i:t,l:!1,exports:{},hot:d(t),parents:(c=i,i=[],c),children:[]};return e[t].call(r.exports,r,r.exports,a(t)),r.l=!0,r.exports}D.m=e,D.c=_,D.d=function(e,t,r){D.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},D.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},D.t=function(e,t){if(1&t&&(e=D(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(D.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)D.d(r,n,function(t){return e[t]}.bind(null,n));return r},D.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return D.d(t,"a",t),t},D.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},D.p="/Users/saifurrehman/Desktop/POCs/cumulus-bank/new/Authentication-Microservice/dist",D.h=function(){return o},a(0)(D.s=0)}([function(e,t,r){r(1),e.exports=r(2)},function(e,t){e.exports=require("@babel/polyfill")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3),o=r(4),s=r(5);o("ts-express:server");const i=function(e){let t="string"==typeof e?parseInt(e,10):e;return isNaN(t)?e:t>=0&&t}(3004);s.default.set("port",i);const c=n.createServer(s.default);c.listen(i),c.on("error",function(e){if("listen"!==e.syscall)throw e;let t="string"==typeof i?"Pipe "+i:"Port "+i;switch(e.code){case"EACCES":console.error(`${t} requires elevated privileges`),process.exit(1);break;case"EADDRINUSE":console.error(`${t} is already in use`),process.exit(1);break;default:throw e}}),c.on("listening",function(){let e=c.address(),t="string"==typeof e?`pipe ${e}`:`port ${e.port}`;o(`Listening on ${t}`)})},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("debug")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(6),o=r(7),s=r(8),i=r(9),c=r(10),a=r(11),d=r(12),l=r(13);let u=r(14);t.default=(new class{constructor(){this.jwtOptions={},this.ExtractJwt=c.ExtractJwt,this.JwtStrategy=c.ExtractJwt,this.newdata=[],this.jwtOptions.jwtFromRequest=this.ExtractJwt.fromAuthHeaderAsBearerToken(),this.jwtOptions.secretOrKey=process.env.SECRET,this.connectionString={host:"9.30.160.236",user:"admin",password:"admin",database:"SAMPLE",connectionLimit:5,port:"32482"},this.pool=u.createPool(this.connectionString),console.log(this.connectionString),this.express=n(),a.instrument(this.express),this.middleware(),this.routes()}ensureToken(e,t,r){const n=e.headers.authorization;if(void 0!==n){const t=n.split(" ")[1];e.token=t,r()}else t.sendStatus(403)}middleware(){this.express.use(function(e,t,r){t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Headers","X-Requested-With,content-type"),t.header("Access-Control-Allow-Methods","GET, POST, OPTIONS, PUT, PATCH, DELETE"),r()}),this.express.use(o("dev")),this.express.use(s.json()),this.express.use(i.initialize()),this.express.use(s.urlencoded({extended:!1}))}routes(){let e=n.Router();e.post("/login",(e,t,r)=>{this.pool.getConnection().then(r=>{r.query("SELECT * FROM SAMPLE.UserData WHERE Email=?",[e.body.email]).then(n=>{n?l.verify(e.body.password,n[0].Password)?(r.end(),console.log(process.env.SECRET),n={data:n},t.json({sucessful:!0,token:d.sign(n,"process.env.SECRET")})):(r.end(),t.status(401).json({message:"Password/Email did not match"})):(r.end(),t.status(401).json({message:"Please signup, no email exists"}))}).catch(e=>{r.end(),e&&(t.status(404).json({err:e}),console.log(e))})}).catch(e=>{e&&(t.status(404).json({err:e}),console.log(e))})}),e.post("/createUser",(e,t,r)=>{this.newdata=[],this.pool.getConnection().then(r=>{r.query("insert into SAMPLE.UserData (LastName, FirstName, Email, Password, Age, Mobile) VALUES (?, ?, ?, ?, ?, ?)",[e.body.lastName,e.body.firstName,e.body.email,l.generate(e.body.password),e.body.age,e.body.mobile]).then(e=>{r.end(),t.json({message:"sucessful"})}).catch(e=>{r.end(),e&&t.status(404).json({err:e})})}).catch(e=>{e&&t.status(404).json({err:e})})}),e.get("/healthz",(e,t,r)=>{t.send("success")}),this.express.use("/",e)}}).express},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("morgan")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("passport")},function(e,t){e.exports=require("passport-jwt")},function(e,t){e.exports=require("epimetheus")},function(e,t){e.exports=require("jsonwebtoken")},function(e,t){e.exports=require("password-hash")},function(e,t){e.exports=require("mariadb")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,