!function(e){function r(e){var r=require("./"+e+"."+o+".hot-update.js");!function(e,r){if(!w[e]||!g[e])return;for(var t in g[e]=!1,r)Object.prototype.hasOwnProperty.call(r,t)&&(h[t]=r[t]);0==--v&&0===m&&j()}(r.id,r.modules)}var t,n=!0,o="95c6816603f0acb6af71",s={},i=[],c=[];function a(e){var r=_[e];if(!r)return D;var n=function(n){return r.hot.active?(_[n]?-1===_[n].parents.indexOf(e)&&_[n].parents.push(e):(i=[e],t=n),-1===r.children.indexOf(n)&&r.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),i=[]),D(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return D[e]},set:function(r){D[e]=r}}};for(var s in D)Object.prototype.hasOwnProperty.call(D,s)&&"e"!==s&&"t"!==s&&Object.defineProperty(n,s,o(s));return n.e=function(e){return"ready"===u&&p("prepare"),m++,D.e(e).then(r,function(e){throw r(),e});function r(){m--,"prepare"===u&&(b[e]||E(e),0===m&&0===v&&j())}},n.t=function(e,r){return 1&r&&(e=n(e)),D.t(e,-2&r)},n}function d(e){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:t!==e,active:!0,accept:function(e,t){if(void 0===e)r._selfAccepted=!0;else if("function"==typeof e)r._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)r._acceptedDependencies[e[n]]=t||function(){};else r._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)r._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)r._declinedDependencies[e[t]]=!0;else r._declinedDependencies[e]=!0},dispose:function(e){r._disposeHandlers.push(e)},addDisposeHandler:function(e){r._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=r._disposeHandlers.indexOf(e);t>=0&&r._disposeHandlers.splice(t,1)},check:O,apply:P,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var r=l.indexOf(e);r>=0&&l.splice(r,1)},data:s[e]};return t=void 0,r}var l=[],u="idle";function p(e){u=e;for(var r=0;r<l.length;r++)l[r].call(null,e)}var f,h,y,v=0,m=0,b={},g={},w={};function x(e){return+e+""===e?+e:e}function O(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return n=e,p("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return p("idle"),null;g={},b={},w=e.c,y=e.h,p("prepare");var r=new Promise(function(e,r){f={resolve:e,reject:r}});h={};return E(0),"prepare"===u&&0===m&&0===v&&j(),r})}function E(e){w[e]?(g[e]=!0,v++,r(e)):b[e]=!0}function j(){p("ready");var e=f;if(f=null,e)if(n)Promise.resolve().then(function(){return P(n)}).then(function(r){e.resolve(r)},function(r){e.reject(r)});else{var r=[];for(var t in h)Object.prototype.hasOwnProperty.call(h,t)&&r.push(x(t));e.resolve(r)}}function P(r){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var t,n,c,a,d;function l(e){for(var r=[e],t={},n=r.slice().map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),s=o.id,i=o.chain;if((a=_[s])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:s};if(a.hot._main)return{type:"unaccepted",chain:i,moduleId:s};for(var c=0;c<a.parents.length;c++){var d=a.parents[c],l=_[d];if(l){if(l.hot._declinedDependencies[s])return{type:"declined",chain:i.concat([d]),moduleId:s,parentId:d};-1===r.indexOf(d)&&(l.hot._acceptedDependencies[s]?(t[d]||(t[d]=[]),f(t[d],[s])):(delete t[d],r.push(d),n.push({chain:i.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function f(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}r=r||{};var v={},m=[],b={},g=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var O in h)if(Object.prototype.hasOwnProperty.call(h,O)){var E;d=x(O);var j=!1,P=!1,A=!1,S="";switch((E=h[O]?l(d):{type:"disposed",moduleId:O}).chain&&(S="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":r.onDeclined&&r.onDeclined(E),r.ignoreDeclined||(j=new Error("Aborted because of self decline: "+E.moduleId+S));break;case"declined":r.onDeclined&&r.onDeclined(E),r.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+S));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(E),r.ignoreUnaccepted||(j=new Error("Aborted because "+d+" is not accepted"+S));break;case"accepted":r.onAccepted&&r.onAccepted(E),P=!0;break;case"disposed":r.onDisposed&&r.onDisposed(E),A=!0;break;default:throw new Error("Unexception type "+E.type)}if(j)return p("abort"),Promise.reject(j);if(P)for(d in b[d]=h[d],f(m,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,d)&&(v[d]||(v[d]=[]),f(v[d],E.outdatedDependencies[d]));A&&(f(m,[E.moduleId]),b[d]=g)}var q,k=[];for(n=0;n<m.length;n++)d=m[n],_[d]&&_[d].hot._selfAccepted&&k.push({module:d,errorHandler:_[d].hot._selfAccepted});p("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var H,I,M=m.slice();M.length>0;)if(d=M.pop(),a=_[d]){var C={},T=a.hot._disposeHandlers;for(c=0;c<T.length;c++)(t=T[c])(C);for(s[d]=C,a.hot.active=!1,delete _[d],delete v[d],c=0;c<a.children.length;c++){var U=_[a.children[c]];U&&((q=U.parents.indexOf(d))>=0&&U.parents.splice(q,1))}}for(d in v)if(Object.prototype.hasOwnProperty.call(v,d)&&(a=_[d]))for(I=v[d],c=0;c<I.length;c++)H=I[c],(q=a.children.indexOf(H))>=0&&a.children.splice(q,1);for(d in p("apply"),o=y,b)Object.prototype.hasOwnProperty.call(b,d)&&(e[d]=b[d]);var R=null;for(d in v)if(Object.prototype.hasOwnProperty.call(v,d)&&(a=_[d])){I=v[d];var L=[];for(n=0;n<I.length;n++)if(H=I[n],t=a.hot._acceptedDependencies[H]){if(-1!==L.indexOf(t))continue;L.push(t)}for(n=0;n<L.length;n++){t=L[n];try{t(I)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:d,dependencyId:I[n],error:e}),r.ignoreErrored||R||(R=e)}}}for(n=0;n<k.length;n++){var N=k[n];d=N.module,i=[d];try{D(d)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(t){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:t,originalError:e}),r.ignoreErrored||R||(R=t),R||(R=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:d,error:e}),r.ignoreErrored||R||(R=e)}}return R?(p("fail"),Promise.reject(R)):(p("idle"),new Promise(function(e){e(m)}))}var _={};function D(r){if(_[r])return _[r].exports;var t=_[r]={i:r,l:!1,exports:{},hot:d(r),parents:(c=i,i=[],c),children:[]};return e[r].call(t.exports,t,t.exports,a(r)),t.l=!0,t.exports}D.m=e,D.c=_,D.d=function(e,r,t){D.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},D.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},D.t=function(e,r){if(1&r&&(e=D(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(D.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)D.d(t,n,function(r){return e[r]}.bind(null,n));return t},D.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return D.d(r,"a",r),r},D.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},D.p="/Users/saifurrehman/Desktop/POCs/cumulus-bank/authmicroservice-mariadb/dist",D.h=function(){return o},a(0)(D.s=0)}([function(e,r,t){t(1),e.exports=t(2)},function(e,r){e.exports=require("@babel/polyfill")},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(3),o=t(4),s=t(5);o("ts-express:server");const i=function(e){let r="string"==typeof e?parseInt(e,10):e;return isNaN(r)?e:r>=0&&r}(3004);s.default.set("port",i);const c=n.createServer(s.default);c.listen(i),c.on("error",function(e){if("listen"!==e.syscall)throw e;let r="string"==typeof i?"Pipe "+i:"Port "+i;switch(e.code){case"EACCES":console.error(`${r} requires elevated privileges`),process.exit(1);break;case"EADDRINUSE":console.error(`${r} is already in use`),process.exit(1);break;default:throw e}}),c.on("listening",function(){let e=c.address(),r="string"==typeof e?`pipe ${e}`:`port ${e.port}`;o(`Listening on ${r}`)})},function(e,r){e.exports=require("http")},function(e,r){e.exports=require("debug")},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(6),o=t(7),s=t(8),i=t(9),c=t(10),a=t(11),d=t(12),l=t(13);let u=t(14);r.default=(new class{constructor(){this.jwtOptions={},this.ExtractJwt=c.ExtractJwt,this.JwtStrategy=c.ExtractJwt,this.newdata=[],this.jwtOptions.jwtFromRequest=this.ExtractJwt.fromAuthHeaderAsBearerToken(),this.jwtOptions.secretOrKey="process.env.SECRET",this.connectionString={host:"localhost",user:"admin",password:"admin",database:"SAMPLE",connectionLimit:5,port:"3306"},this.pool=u.createPool(this.connectionString),console.log(this.connectionString),this.express=n(),a.instrument(this.express),this.middleware(),this.routes()}ensureToken(e,r,t){const n=e.headers.authorization;if(void 0!==n){const r=n.split(" ")[1];e.token=r,t()}else r.sendStatus(403)}middleware(){this.express.use(function(e,r,t){r.header("Access-Control-Allow-Origin","*"),r.header("Access-Control-Allow-Headers","X-Requested-With,content-type"),r.header("Access-Control-Allow-Methods","GET, POST, OPTIONS, PUT, PATCH, DELETE"),t()}),this.express.use(o("dev")),this.express.use(s.json()),this.express.use(i.initialize()),this.express.use(s.urlencoded({extended:!1}))}routes(){let e=n.Router();e.post("/login",(e,r,t)=>{this.pool.getConnection().then(t=>{t.query("SELECT * FROM SAMPLE.UserData WHERE Email=?",[e.body.email]).then(n=>{n?l.verify(e.body.password,n[0].Password)?(t.end(),n={data:n},r.json({sucessful:!0,token:d.sign(n,"process.env.SECRET")})):(t.end(),r.status(401).json({message:"Password/Email did not match"})):(t.end(),r.status(401).json({message:"Please signup, no email exists"}))}).catch(e=>{t.end(),e&&(r.status(404).json({err:e}),console.log(e))})}).catch(e=>{e&&(r.status(404).json({err:e}),console.log(e))})}),e.post("/createUser",(e,r,t)=>{this.newdata=[],this.pool.getConnection().then(t=>{t.query("insert into SAMPLE.UserData (LastName, FirstName, Email, Password, Age, Mobile) VALUES (?, ?, ?, ?, ?, ?)",[e.body.lastName,e.body.firstName,e.body.email,l.generate(e.body.password),e.body.age,e.body.mobile]).then(e=>{t.end(),r.json({message:"sucessful"})}).catch(e=>{t.end(),e&&r.status(404).json({err:e})})}).catch(e=>{e&&r.status(404).json({err:e})})}),e.get("/healthz",(e,r,t)=>{r.send("success")}),this.express.use("/",e)}}).express},function(e,r){e.exports=require("express")},function(e,r){e.exports=require("morgan")},function(e,r){e.exports=require("body-parser")},function(e,r){e.exports=require("passport")},function(e,r){e.exports=require("passport-jwt")},function(e,r){e.exports=require("epimetheus")},function(e,r){e.exports=require("jsonwebtoken")},function(e,r){e.exports=require("password-hash")},function(e,r){e.exports=require("mariadb")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,